CSC108 Review
Created by August

id(地址）与type：
    int str float 等type在赋值时是不会一同赋值地址
    例如：
        a = 0
        b = a
        b = 1
        print(a) # should get 0
    
    但是list是一个例外
    list在赋值的同时会赋值地址
    例如：
        a = ['hi']
        b = a
        b.append('yo')
        print(a) # should get ['hi','yo']
    
    如果想赋值一个list但是并不想赋值它的地址：
        b = a[:] or b = a.copy()
    
    *** 一定要记住 只有直接修改lst的时候才会对他们造成影响
    例：
    L = [1, 1, 2, 2, 3, 4]
    for item in L:
        if item % 2 == 1:
            item = item + 1
    print(L)

    在这个例子中 最后print的L应该依旧是[1, 1, 2, 2, 3, 4]
    因为item只是从L中提取出来的一个int 修改这个int并不会对原list有影响


文件读取与录入：
    读取模式：
    f = open('text.txt','r')
    录入模式:
    f = open('text.txt','w')

    文件读取主要包含以下几种方式：
        f.read() # 只有一个string
        f.readline() # 一行一行读 每次使用后就会切换掉下一行
        f.readlines() # 一个list 每个element是一行
        for line in f #自己悟
    
    在读取文件后需要strip()以消除换行(‘\n’)

    文件录入:
        f.write() 
    但是注意 这里的write不包含换行 也就是说：
    f.write('hi')
    f.write('hello')
    文件里应该长成这样:
    hihello


dictionary的一些特性：
    首先dic中的key可以是 int,str,tuple，是immutable
    dic中的value可以是任何type
    

排序算法：
    冒泡（Bubble Sort):
        动画演示：https://www.runoob.com/w3cnote/bubble-sort.html
        original: [6, 3, 0, 8, 1, 2, 7, 5]
        first pass: [3, 0, 6, 1, 2, 7, 5, 8] #最后一位排序正确
        second pass: [3, 0, 6, 1, 2, 5, 7, 8] #最后两位排序正确
        
        规律：运行几次就最后至少有几位排序正确

    选择 (Selection Sort):
        动画演示：https://www.runoob.com/w3cnote/selection-sort.html
        original: [6, 3, 0, 8, 1, 2, 7, 5]
        first pass: [0, 3, 6, 8, 1, 2, 7, 5] #第一位排序正确
        second pass: [0, 1, 6, 8, 3, 2, 7, 5] #前二位排序正确

        第n次就是把第n个和后面最小的一个数字更换位置
        规律：运行几次就至少前面几位排序正确

    插入（Insertion Sort）:
        动画演示：https://www.runoob.com/w3cnote/insertion-sort.html
        original: [6, 3, 0, 8, 1, 2, 7, 5]
        first pass: [6, 3, 0, 8, 1, 2, 7, 5] 
        second pass: [3, 6, 0, 8, 1, 2, 7, 5] #前两位位排序正确
        third pass: [0, 3, 6, 8, 1, 2, 7, 5] #前三位位排序正确
        ***注意***
        这里说的前两位是指对于这两位来说 排序正确 [3,6]
        而不是对于最后的结果来说前两位正确

        规律：第n次运行就是前面n个东西单拎出来是正确的
    
    例题：
    1.bubble sort [ 3, 1, 6, 4, 9, 8 ] 需要几个pass？ A：1
    因为一次bubble里会出现这么几步：
        [ 3, 1, 6, 4, 9, 8 ]
        [ 1, 3, 6, 4, 9, 8 ]
        [ 1, 3, 6, 4, 9, 8 ]
        [ 1, 3, 4, 6, 9, 8 ]
        [ 1, 3, 4, 6, 9, 8 ]
        [ 1, 3, 4, 6, 8, 9 ]
    你会发现一次下来正好排序完成 所以考试的时候一定要自己去手动写一次sort

    2.how many passes for insertion sort in list [ 9, 8, 3, 1, 6, 4 ]? A: 6
    以下是每次inset：
        1. [ 9, 8, 3, 1, 6, 4 ]
        2. [ 8, 9, 3, 1, 6, 4 ]
        3. [ 3, 8, 9, 1, 6, 4 ]
        4. [ 1, 3, 8, 9, 6, 4 ]
        5. [ 1, 3, 6, 8, 9, 4 ]
        6. [ 1, 3, 4, 6, 8, 9 ]

    3. selection sort for [ 9, 8, 6, 4, 3, 1 ]? A: 3
        1. [ 1, 8, 6, 4, 3, 9 ]
        2. [ 1, 2, 6, 4, 8, 9 ]
        3. [ 1, 2, 4, 6, 8, 9 ]


搜索算法： 
    二分搜索（Binary search algorithm）：
    [1, 2, 3, 4, 5, 6, 7, 8, 9]
    如果我想在这里寻找2，那么我们的步骤就是：
        1.先找到这个list的中间值   lst[len(lst)//2]  (5):
        2.比较我们的目标和这个中间值，2 < 5 所以我们的目标应该是在左边
        3.把我们的搜索范围缩小到lst中间往左，也就是只剩下[1,2,3,4]
        4.重复以上步骤后 我们最后就会得出所在的位置
        就像那个猜数字游戏一样，可以告诉你大了小了以便你猜的更高还是更低
    
    注意 在使用二分搜索之前 必须确定自己的list是已经sort过的

    直搜（linear search）：
        就是从左到右一个个搜索直到找到目标
    
    二分和直搜优势：
        如果考试的时候告诉你了：
            1.list of one million unique items
            2.value being searched for was the second item
        这样就是linear更快 因为linear只需要查到第二个就可以查到

        如果：
            1.list is not sorted
        那么linear更快 因为binary还需要sort

        如果：
            1.list of one million unique items
            2.value being searched for was not in the sorted list
        那么binary更快

__name__的用法：
    如果是在自己文件中直接启动，那么__name__将等于__main__
    如果是在其他文件中调用，那么__name__将等于这个文件的名字
    所以在用doctest的时候的格式就是
    if __name__ == __main__:
    意思就是在自己的文件中启动才会进行以下操作

    例如 如果这个文件为'anmals.py'
    它的 __name__ == 'anmals'
  

pytest：
    pytest 主要用于进行expect和actual get的对比
    基础格式是：
    （用week10 markus举例）
    def test_not_all_fluffy() -> None: #function名字开头必须是test
    """Test that the some but not all letter in  fluffy"""
    expected = True
    actual = all_fluffy('fluff')
    msg = "Expected {}, but returned {}".format(expected, actual) #这一行可写可不写
    assert actual is expected, msg #对比actual和expected

    在考试中大概率不要求写具体function而是写bug case 
    如果不能直接直接想出来可以考虑用这几个方面：
    Size,Dichotomies,Bondaries,Order
    

一些其他常用functions:
    split():
        默认值是空格’ ‘ 

        example 1:
            s = 'big orange cats'
            lst = s.split()
            print(lst) # should get ['big','orange','cats']
        
        example 2:
            s = '1,Allen,good'
            lst = s.split(',')
            print(lst) # shouold get ['1','Allen','good']

    append and extend :
        append用来添加单个数据：
            lst.append(1)
        extend用来添加多个数据：
            lst.extend([1,2,3,4])

    is


常见errors：
    NoneType Error:
        lst = [1,2,3,4,5,6,7]
        lst2 = lst.sort() #sort不返回任何值 所以现在lst2是None
        lst3 = lst2[0]
        print(lst3)
    
    Index Error:
        f = open('something.txt')
        f.read() #read()就是全读完了 相当于读了无数行readline（）直到没有东西
        f.readline()[0] #在这个时候readline就相当于读了一个空 ‘’ 所以[0] out of range
    

另外一些考试常考的题目：
    palindrome 回文
    ‘abcdcba'
    那么如果写一个function来判定是否为palindrome
    两种常见写法：
        1.for loop:
            for i in range(len(s)//2):
                if not s[i] == s[len(s) - 1 - i]:
                    return False
        
        2.while loop:
            i = 0
            while i < len(s) // 2 and s[i] == s[len(s) - i - 1]:
                i = i + 1
            return i == len(s) // 2

    best case and worst case:
        best case: 运行最快的case
            例：
            i = 0
            while i < len(s) and not s[i] == '.':
                i += 1
            那么最快通过这个while循环的就是'.'在第一位的 例如‘.ssss'
        worst case: 运行最慢的case
            上面一样的case 最慢的就是要把整个string读完的，也就是一个‘.'都没有


一些常见大题：
    1. List and Conditionals:
        Write a function remove_negatives(numbers) that takes a list 
        of numbers and returns a new list with all negative numbers removed.
    2. String and Looping:
        Create a function alternate_case(string) which takes a string and returns
        a new string where the case of each letter is reversed. For instance, 
        'Hello World' becomes 'hELLO wORLD'.
    3. Data Structure (Dictionary) Question:
        Write a function count_letter_frequency(text) that takes a string and 
        returns a dictionary where keys are letters and values are the count of how 
        often they appear in the string.
    4. File I/O and Data Processing:
        Write a function read_first_word_each_line(filename) that reads a file and 
        returns a list containing the first word from each line of the file.
    5. Functional Programming:
        Create a function filter_odd_square(numbers) that takes a list of numbers 
        and returns a new list containing the squares of all odd numbers from the original list.


example Answers:
    Q1:
    answer = {}
    school_name = ''
    for line in f:
        line = line.strip()
        if "SCHOOL" in line:
            school_name = line.split()[1]
        else:
            prof_info = line.split()
            prof_name = prof_info[2]
            if len(prof_info) > 3:
                prof_name += ' ' + prof_info[3]
            if school_name in answer:
                answer[school_name].append(prof_name)
            else:
                answer[school_name] = [prof_name]
    return answer

    Q2:    
    name_lst = []
    for i in range(0,len(contacts),2):
        name_lst.append(contacts[i])
    name_lst.sort()
    contacts_copy = contacts[:]
    contacts.clear()
    for name in name_lst:
        contacts.append(name)
        index = contacts_copy.index(name)
        contacts.append(contacts_copy[index+1])

    Q3:
    matches = []
    for i in range(len(lst)-1,-1,-1):
        element = lst[i]
        lst.pop()
        if not element in matches and element in lst:
            matches.append(element)
    return len(matches)

    Q4:
    n = len(grid)
    for i in range(n):
        for j in range(i + 1, n):
            grid[i][j], grid[j][i] = grid[j][i], grid[i][j]




#                            _ooOoo_
#                           o8888888o
#                           88" . "88
#                           (| -_- |)
#                           O\  =  /O
#                        ____/`---'\____
#                      .'  \\|     |//  `.
#                     /  \\|||  :  |||//  \
#                    /  _||||| -:- |||||-  \
#                    |   | \\\  -  /// |   |
#                    | \_|  ''\---/''  |   |
#                    \  .-\__  `-`  ___/-. /
#                  ___`. .'  /--.--\  `. . __
#               ."" '<  `.___\_<|>_/___.'  >'"".
#              | | :  `- \`.;`\ _ /`;.`/ - ` : | |
#              \  \ `-.   \_ __\ /__ _/   .-` /  /
#         ======`-.____`-.___\_____/___.-`____.-'======
#                            `=---='
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#                      Buddha Bless, No Bug !